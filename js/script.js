// S·∫Øp T·∫øt 2026 - Enhanced Countdown and Calendar

// T·∫øt dates for the next few years (Vietnamese Lunar New Year)
// Set to 00:00:00 Vietnam time (UTC+7)
const tetDates = {
    2025: new Date('2025-01-29T00:00:00+07:00'), // T·∫øt ·∫§t T·ªµ
    2026: new Date('2026-02-17T00:00:00+07:00'), // T·∫øt B√≠nh Ng·ªç
    2027: new Date('2027-02-06T00:00:00+07:00'), // T·∫øt ƒêinh M√πi
    2028: new Date('2028-01-26T00:00:00+07:00'), // T·∫øt M·∫≠u Th√¢n
    2029: new Date('2029-02-13T00:00:00+07:00'), // T·∫øt K·ª∑ D·∫≠u
};

// Calendar state
let currentCalendarDate = new Date();
let selectedDate = null;

// Lunar calendar data (simplified - in real app would use proper lunar calendar library)
const lunarMonths = [
    'Th√°ng Gi√™ng', 'Th√°ng Hai', 'Th√°ng Ba', 'Th√°ng T∆∞',
    'Th√°ng NƒÉm', 'Th√°ng S√°u', 'Th√°ng B·∫£y', 'Th√°ng T√°m',
    'Th√°ng Ch√≠n', 'Th√°ng M∆∞·ªùi', 'Th√°ng M∆∞·ªùi M·ªôt', 'Th√°ng Ch·∫°p'
];

const zodiacAnimals = [
    'T√Ω (Chu·ªôt)', 'S·ª≠u (Tr√¢u)', 'D·∫ßn (H·ªï)', 'M√£o (M√®o)',
    'Th√¨n (R·ªìng)', 'T·ªµ (R·∫Øn)', 'Ng·ªç (Ng·ª±a)', 'M√πi (D√™)',
    'Th√¢n (Kh·ªâ)', 'D·∫≠u (G√†)', 'Tu·∫•t (Ch√≥)', 'H·ª£i (Heo)'
];

function getNextTet() {
    const now = new Date();
    const currentYear = now.getFullYear();
    
    // Check if current year's T·∫øt has passed
    if (tetDates[currentYear] && now < tetDates[currentYear]) {
        return { year: currentYear, date: tetDates[currentYear] };
    }
    
    // If current year's T·∫øt has passed, get next year's T·∫øt
    const nextYear = currentYear + 1;
    if (tetDates[nextYear]) {
        return { year: nextYear, date: tetDates[nextYear] };
    }
    
    // Fallback: estimate next year's T·∫øt
    const estimatedDate = new Date(nextYear, 0, 29);
    return { year: nextYear, date: estimatedDate };
}

function updateCountdown() {
    const nextTet = getNextTet();
    const now = new Date().getTime();
    const tetTime = nextTet.date.getTime();
    const distance = tetTime - now;
    
    // Update the year display
    document.getElementById('tet-year').textContent = nextTet.year;
    
    if (distance > 0) {
        // Calculate time units
        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);
        
        // Update the display
        document.getElementById('days').textContent = days.toString().padStart(2, '0');
        document.getElementById('hours').textContent = hours.toString().padStart(2, '0');
        document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
        document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
        
        // Hide greeting message
        document.querySelector('.tet-greeting').style.display = 'none';
    } else {
        // T·∫øt has arrived!
        document.getElementById('days').textContent = '00';
        document.getElementById('hours').textContent = '00';
        document.getElementById('minutes').textContent = '00';
        document.getElementById('seconds').textContent = '00';
        
        // Show greeting message
        document.querySelector('.tet-greeting').style.display = 'block';
    }
}

// Calendar functions
function generateCalendar(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();
    const today = new Date();
    
    const calendarGrid = document.getElementById('calendar-grid');
    const currentMonthElement = document.getElementById('current-month');
    
    // Update month display
    const monthNames = [
        'Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4',
        'Th√°ng 5', 'Th√°ng 6', 'Th√°ng 7', 'Th√°ng 8',
        'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'
    ];
    currentMonthElement.textContent = `${monthNames[month]} ${year}`;
    
    // Clear previous calendar
    calendarGrid.innerHTML = '';
    
    // Add day headers
    const dayHeaders = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
    dayHeaders.forEach(day => {
        const dayHeader = document.createElement('div');
        dayHeader.className = 'calendar-day-header';
        dayHeader.textContent = day;
        calendarGrid.appendChild(dayHeader);
    });
    
    // Add empty cells for days before the first day of the month
    for (let i = 0; i < startingDayOfWeek; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day other-month';
        calendarGrid.appendChild(emptyDay);
    }
    
    // Add days of the month
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        
        const currentDate = new Date(year, month, day);
        
        // Check if this is today
        const isToday = currentDate.toDateString() === today.toDateString();
        
        // Check if this is a Tet date
        const isTetDate = Object.values(tetDates).some(tetDate => 
            currentDate.toDateString() === tetDate.toDateString()
        );
        
        // Add special classes
        if (isToday) {
            dayElement.classList.add('today');
        }
        if (isTetDate) {
            dayElement.classList.add('tet-date');
        }
        
        // Create solar date element
        const solarDate = document.createElement('div');
        solarDate.className = 'solar-date';
        solarDate.textContent = day;
        
        // Create lunar date element
        const lunarDate = document.createElement('div');
        lunarDate.className = 'lunar-date';
        
        // Calculate lunar date (simplified calculation)
        const lunarInfo = calculateLunarDate(currentDate);
        
        // Format lunar date display
        if (lunarInfo.day === 1) {
            lunarDate.textContent = `${lunarInfo.day}/${lunarInfo.month}`;
        } else {
            lunarDate.textContent = lunarInfo.day;
        }
        
        // Add Tet indicator if it's a Tet date
        if (isTetDate) {
            const tetIndicator = document.createElement('div');
            tetIndicator.className = 'tet-indicator';
            tetIndicator.textContent = 'üßß';
            dayElement.appendChild(tetIndicator);
        }
        
        dayElement.appendChild(solarDate);
        dayElement.appendChild(lunarDate);
        
        // Add click event
        dayElement.addEventListener('click', () => {
            // Remove previous selection
            document.querySelectorAll('.calendar-day.selected').forEach(el => {
                el.classList.remove('selected');
            });
            
            // Add selection to clicked day
            dayElement.classList.add('selected');
            selectedDate = new Date(year, month, day);
            updateLunarInfo(selectedDate);
        });
        
        calendarGrid.appendChild(dayElement);
    }
    
    // Auto-select today if it's in the current month
    if (year === today.getFullYear() && month === today.getMonth()) {
        const todayElement = document.querySelector('.calendar-day.today');
        if (todayElement && !selectedDate) {
            todayElement.classList.add('selected');
            selectedDate = new Date(today);
            updateLunarInfo(selectedDate);
        }
    }
}

// Calculate lunar date (simplified approximation)
function calculateLunarDate(solarDate) {
    // This is a simplified calculation for demonstration
    // In a real application, use a proper lunar calendar library
    const baseDate = new Date(2024, 0, 1); // January 1, 2024
    const daysDiff = Math.floor((solarDate - baseDate) / (1000 * 60 * 60 * 24));
    
    // Approximate lunar calculation (29.5 days per lunar month)
    const lunarDays = Math.floor(daysDiff % 29.5) + 1;
    const lunarMonthIndex = Math.floor(daysDiff / 29.5) % 12;
    
    return {
        day: lunarDays > 29 ? 29 : lunarDays,
        month: lunarMonthIndex
    };
}

function updateLunarInfo(date) {
    const lunarInfoElement = document.getElementById('lunar-date-info');
    
    // Calculate lunar date
    const lunarInfo = calculateLunarDate(date);
    const lunarMonth = lunarMonths[lunarInfo.month - 1] || lunarMonths[0];
    const zodiac = zodiacAnimals[date.getFullYear() % 12];
    
    const dayOfWeek = date.toLocaleDateString('vi-VN', { weekday: 'long' });
    const solarDate = date.toLocaleDateString('vi-VN');
    
    // Calculate auspicious hours for the selected date
    const auspiciousData = calculateAuspiciousHours(date);
    const auspiciousHours = formatAuspiciousInfo(auspiciousData.auspicious);
    const inauspiciousHours = formatAuspiciousInfo(auspiciousData.inauspicious);
    
    // Determine good and bad activities based on lunar day
    const goodActivities = getGoodActivities(lunarInfo.day);
    const badActivities = getBadActivities(lunarInfo.day);
    
    lunarInfoElement.innerHTML = `
        <p><strong>Ng√†y d∆∞∆°ng l·ªãch:</strong> ${dayOfWeek}, ${solarDate}</p>
        <p><strong>Ng√†y √¢m l·ªãch:</strong> ${lunarInfo.day} ${lunarMonth}</p>
        <p><strong>NƒÉm:</strong> ${zodiac}</p>
        <p><strong>Gi·ªù ho√†ng ƒë·∫°o:</strong> ${auspiciousHours}</p>
        <p><strong>Gi·ªù h·∫Øc ƒë·∫°o:</strong> ${inauspiciousHours}</p>
        <p><strong>Vi·ªác n√™n l√†m:</strong> ${goodActivities}</p>
        <p><strong>Vi·ªác kh√¥ng n√™n l√†m:</strong> ${badActivities}</p>
    `;
}

// Navigation functions
function previousMonth() {
    currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
    generateCalendar(currentCalendarDate);
}

function nextMonth() {
    currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
    generateCalendar(currentCalendarDate);
}

// Smooth scrolling for navigation
function smoothScroll(targetId) {
    const target = document.getElementById(targetId);
    if (target) {
        target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// Update Tet date display
function updateTetDateDisplay() {
    const tetDateDisplay = document.querySelector('.tet-date-display');
    if (tetDateDisplay) {
        const nextTet = getNextTet();
        const lunarDate = calculateLunarDate(nextTet.date);
        tetDateDisplay.innerHTML = `
            <p>ƒê√≥n T·∫øt Nguy√™n ƒê√°n B√≠nh Ng·ªç</p>
            <p class="tet-date-solar">${nextTet.date.toLocaleDateString('vi-VN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
        `;
    }
}

// Music Player functionality
function initializeMusicPlayer() {
    const audio = document.getElementById('tet-music');
    const musicToggle = document.getElementById('music-toggle');
    const playIcon = document.querySelector('.play-icon');
    const pauseIcon = document.querySelector('.pause-icon');
    
    if (musicToggle && audio) {
        musicToggle.addEventListener('click', function() {
            if (audio.paused) {
                audio.play().then(() => {
                    playIcon.style.display = 'none';
                    pauseIcon.style.display = 'inline';
                }).catch(error => {
                    console.log('Audio play failed:', error);
                });
            } else {
                audio.pause();
                playIcon.style.display = 'inline';
                pauseIcon.style.display = 'none';
            }
        });
        
        // Handle audio events
        audio.addEventListener('ended', function() {
            playIcon.style.display = 'inline';
            pauseIcon.style.display = 'none';
        });
        
        audio.addEventListener('pause', function() {
            playIcon.style.display = 'inline';
            pauseIcon.style.display = 'none';
        });
        
        audio.addEventListener('play', function() {
            playIcon.style.display = 'none';
            pauseIcon.style.display = 'inline';
        });
        
        // Set volume to a comfortable level
        audio.volume = 0.5;
    }
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Start countdown
    updateCountdown();
    setInterval(updateCountdown, 1000);
    
    // Update Tet date display
    updateTetDateDisplay();
    
    // Initialize calendar with today's date
    const today = new Date();
    currentCalendarDate = new Date(today.getFullYear(), today.getMonth(), 1);
    generateCalendar(currentCalendarDate);
    
    // Add event listeners for calendar navigation
    document.getElementById('prev-month').addEventListener('click', previousMonth);
    document.getElementById('next-month').addEventListener('click', nextMonth);
    
    // Initialize music player
    initializeMusicPlayer();
    
    // Add smooth scrolling to navigation links
    document.querySelectorAll('nav a[href^="#"]').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            smoothScroll(targetId);
        });
    });
    
    // Update current year in footer if exists
    const currentYear = new Date().getFullYear();
    const yearElements = document.querySelectorAll('.current-year');
    yearElements.forEach(element => {
        element.textContent = currentYear;
    });
    
    // Initialize events carousel
    initializeEventsCarousel();
});

// Function to get next occurrence of an event (this year or next year)
function getNextEventDate(month, day, currentYear = null) {
    const now = new Date();
    const year = currentYear || now.getFullYear();
    const eventDate = new Date(year, month - 1, day);
    
    // If the event has passed this year, get next year's date
    if (eventDate < now) {
        return new Date(year + 1, month - 1, day);
    }
    return eventDate;
}

// Events data with dynamic dates
const eventsData = {
    'tet': {
        name: 'T·∫øt Nguy√™n ƒê√°n',
        getDate: () => getNextEventDate(2, 17), // February 17, 2026
        icon: 'üèÆ',
        description: 'ƒê√≥n T·∫øt B√≠nh Ng·ªç',
        background: 'linear-gradient(135deg, #ff6b6b, #ff8e8e)'
    },
    'valentine': {
        name: 'Valentine',
        getDate: () => getNextEventDate(2, 14), // February 14
        icon: 'üíï',
        description: 'Ng√†y T√¨nh Y√™u',
        background: 'linear-gradient(135deg, #ff69b4, #ff1493)'
    },
    'women-day': {
        name: 'Qu·ªëc T·∫ø Ph·ª• N·ªØ',
        getDate: () => getNextEventDate(3, 8), // March 8
        icon: 'üå∏',
        description: 'Ng√†y 8/3',
        background: 'linear-gradient(135deg, #ff69b4, #ffc0cb)'
    },
    'hung-kings': {
        name: 'Gi·ªó T·ªï H√πng V∆∞∆°ng',
        getDate: () => getNextEventDate(4, 7), // April 7 (approximate)
        icon: 'üèõÔ∏è',
        description: '10/3 √Çm L·ªãch',
        background: 'linear-gradient(135deg, #ffd700, #ffed4e)'
    },
    'liberation': {
        name: 'Gi·∫£i Ph√≥ng Mi·ªÅn Nam',
        getDate: () => getNextEventDate(4, 30), // April 30
        icon: 'üáªüá≥',
        description: 'Ng√†y Th·ªëng Nh·∫•t',
        background: 'linear-gradient(135deg, #ff0000, #ffff00)'
    },
    'labor-day': {
        name: 'Qu·ªëc T·∫ø Lao ƒê·ªông',
        getDate: () => getNextEventDate(5, 1), // May 1
        icon: '‚öíÔ∏è',
        description: 'Ng√†y 1/5',
        background: 'linear-gradient(135deg, #ff4757, #ff6b7a)'
    },
    'mid-autumn': {
        name: 'T·∫øt Trung Thu',
        getDate: () => getNextEventDate(10, 6), // October 6 (approximate)
        icon: 'ü•Æ',
        description: '15/8 √Çm L·ªãch',
        background: 'linear-gradient(135deg, #ffa500, #ffb347)'
    },
    'teachers-day': {
        name: 'Nh√† Gi√°o Vi·ªát Nam',
        getDate: () => getNextEventDate(11, 20), // November 20
        icon: 'üìö',
        description: 'Ng√†y Nh√† Gi√°o',
        background: 'linear-gradient(135deg, #4169e1, #6495ed)'
    },
    'christmas': {
        name: 'Gi√°ng Sinh',
        getDate: () => getNextEventDate(12, 25), // December 25
        icon: 'üéÑ',
        description: 'Noel',
        background: 'linear-gradient(135deg, #228b22, #32cd32)'
    },
    'new-year': {
        name: 'T·∫øt D∆∞∆°ng L·ªãch',
        getDate: () => getNextEventDate(1, 1), // January 1
        icon: 'üéÜ',
        description: 'NƒÉm M·ªõi',
        background: 'linear-gradient(135deg, #4169e1, #00bfff)'
    }
};

// Carousel variables
let currentEventIndex = 0;
let carouselInterval;
let modalCountdownInterval;

function initializeEventsCarousel() {
    const carousel = document.getElementById('events-carousel');
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    const modal = document.getElementById('event-modal');
    const closeModal = document.querySelector('.close-modal');
    
    // Update event cards with current dates
    updateEventCards();
    
    // Carousel navigation
    if (prevBtn) {
        prevBtn.addEventListener('click', () => {
            scrollCarousel('prev');
        });
    }
    
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            scrollCarousel('next');
        });
    }
    
    // Modal close events
    if (closeModal) {
        closeModal.addEventListener('click', closeEventModal);
    }
    
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeEventModal();
            }
        });
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
        if (modal && modal.style.display === 'block') {
            if (e.key === 'Escape') {
                closeEventModal();
            }
        }
    });
    
    // Smooth scrolling behavior for carousel
    if (carousel) {
        carousel.style.scrollBehavior = 'smooth';
    }
}

// Update event cards with current dates and sort by upcoming dates
function updateEventCards() {
    const carousel = document.getElementById('events-carousel');
    if (!carousel) return;
    
    // Get all events with their dates and sort by upcoming dates
    const sortedEvents = Object.keys(eventsData)
        .map(eventKey => ({
            key: eventKey,
            data: eventsData[eventKey],
            date: eventsData[eventKey].getDate()
        }))
        .sort((a, b) => a.date - b.date);
    
    // Clear carousel and rebuild with sorted events
    carousel.innerHTML = '';
    
    sortedEvents.forEach(({ key, data }) => {
        const eventDate = data.getDate();
        const card = document.createElement('div');
        card.className = 'event-card';
        card.setAttribute('data-event', key);
        
        card.innerHTML = `
            <div class="event-icon">${data.icon}</div>
            <h3>${data.name}</h3>
            <p class="event-date">${eventDate.toLocaleDateString('vi-VN')}</p>
            <p class="event-desc">${data.description}</p>
        `;
        
        // Add click event with smooth scroll to center
        card.addEventListener('click', () => {
            scrollCardToCenter(card);
            openEventModal(key);
        });
        
        carousel.appendChild(card);
    });
}

function scrollCarousel(direction) {
    const carouselContainer = document.querySelector('.events-carousel-container');
    const cardWidth = 280 + 32; // card width + gap
    const scrollAmount = direction === 'next' ? cardWidth : -cardWidth;
    
    carouselContainer.scrollBy({
        left: scrollAmount,
        behavior: 'smooth'
    });
}

function scrollCardToCenter(card) {
    const carouselContainer = document.querySelector('.events-carousel-container');
    const cardRect = card.getBoundingClientRect();
    const containerRect = carouselContainer.getBoundingClientRect();
    
    // Calculate the position to center the card
    const cardCenter = cardRect.left + cardRect.width / 2;
    const containerCenter = containerRect.left + containerRect.width / 2;
    const scrollOffset = cardCenter - containerCenter;
    
    carouselContainer.scrollBy({
        left: scrollOffset,
        behavior: 'smooth'
    });
}

function openEventModal(eventType) {
    const eventData = eventsData[eventType];
    if (!eventData) return;
    
    const modal = document.getElementById('event-modal');
    if (!modal) return;
    
    const modalContent = modal.querySelector('.modal-content');
    const modalIcon = document.getElementById('modal-icon');
    const modalTitle = document.getElementById('modal-title');
    const modalDate = document.getElementById('modal-date');
    const modalDescription = document.getElementById('modal-description');
    
    if (!modalContent || !modalIcon || !modalTitle || !modalDate || !modalDescription) return;
    
    const eventDate = eventData.getDate();
    
    // Update modal content
    modalIcon.textContent = eventData.icon;
    modalTitle.textContent = eventData.name;
    modalDate.textContent = eventDate.toLocaleDateString('vi-VN');
    modalDescription.textContent = eventData.description;
    modalContent.style.background = eventData.background;
    
    // Show modal
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    // Start countdown for this event
    startModalCountdown(eventDate);
    
    // Add entrance animation
    modalContent.style.transform = 'scale(0.7)';
    modalContent.style.opacity = '0';
    
    setTimeout(() => {
        modalContent.style.transition = 'all 0.3s ease';
        modalContent.style.transform = 'scale(1)';
        modalContent.style.opacity = '1';
    }, 10);
}

function closeEventModal() {
    const modal = document.getElementById('event-modal');
    const modalContent = modal.querySelector('.modal-content');
    
    // Add exit animation
    modalContent.style.transition = 'all 0.3s ease';
    modalContent.style.transform = 'scale(0.7)';
    modalContent.style.opacity = '0';
    
    setTimeout(() => {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
        
        // Clear countdown interval
        if (modalCountdownInterval) {
            clearInterval(modalCountdownInterval);
        }
    }, 300);
}

function startModalCountdown(targetDate) {
    // Clear any existing interval
    if (modalCountdownInterval) {
        clearInterval(modalCountdownInterval);
    }
    
    function updateModalCountdown() {
        const now = new Date().getTime();
        const targetTime = targetDate.getTime();
        const distance = targetTime - now;
        
        if (distance > 0) {
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);
            
            document.getElementById('modal-days').textContent = days.toString().padStart(2, '0');
            document.getElementById('modal-hours').textContent = hours.toString().padStart(2, '0');
            document.getElementById('modal-minutes').textContent = minutes.toString().padStart(2, '0');
            document.getElementById('modal-seconds').textContent = seconds.toString().padStart(2, '0');
        } else {
            // Event has passed
            document.getElementById('modal-days').textContent = '00';
            document.getElementById('modal-hours').textContent = '00';
            document.getElementById('modal-minutes').textContent = '00';
            document.getElementById('modal-seconds').textContent = '00';
        }
    }
    
    // Update immediately
    updateModalCountdown();
    
    // Update every second
    modalCountdownInterval = setInterval(updateModalCountdown, 1000);
}

// Add seasonal decorations based on current date
function addSeasonalDecorations() {
    const now = new Date();
    const month = now.getMonth() + 1;
    const day = now.getDate();
    
    let decorationEmoji = 'üéä';
    
    // Determine seasonal decoration
    if ((month === 12 && day >= 20) || (month === 1 && day <= 15)) {
        decorationEmoji = 'üèÆ'; // T·∫øt season
    } else if (month === 2 && day >= 10 && day <= 20) {
        decorationEmoji = 'üíï'; // Valentine season
    } else if (month === 3) {
        decorationEmoji = 'üå∏'; // Spring
    } else if (month >= 9 && month <= 11) {
        decorationEmoji = 'üçÇ'; // Autumn
    } else if (month === 12 && day >= 15) {
        decorationEmoji = 'üéÑ'; // Christmas season
    }
    
    // Update background decorations
    const eventsSection = document.querySelector('.events-section');
    if (eventsSection) {
        eventsSection.style.setProperty('--decoration-emoji', `"${decorationEmoji}"`);
    }
}

// Smooth scrolling for all links
function initializeSmoothScrolling() {
    // Add smooth scrolling to all anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

// Vietnamese Auspicious Hours Calculator
function calculateAuspiciousHours(date) {
    const dayOfWeek = date.getDay(); // 0 = Sunday, 1 = Monday, etc.
    const lunarDay = getLunarDay(date);
    
    // Traditional Vietnamese auspicious hours based on day of week and lunar calendar
    const auspiciousHours = {
        0: ['23-01', '05-07', '11-13'], // Sunday
        1: ['01-03', '07-09', '13-15'], // Monday  
        2: ['03-05', '09-11', '15-17'], // Tuesday
        3: ['05-07', '11-13', '17-19'], // Wednesday
        4: ['07-09', '13-15', '19-21'], // Thursday
        5: ['09-11', '15-17', '21-23'], // Friday
        6: ['11-13', '17-19', '23-01']  // Saturday
    };
    
    const inauspiciousHours = {
        0: ['09-11', '15-17', '21-23'], // Sunday
        1: ['11-13', '17-19', '23-01'], // Monday
        2: ['13-15', '19-21', '01-03'], // Tuesday
        3: ['15-17', '21-23', '03-05'], // Wednesday
        4: ['17-19', '23-01', '05-07'], // Thursday
        5: ['19-21', '01-03', '07-09'], // Friday
        6: ['21-23', '03-05', '09-11']  // Saturday
    };
    
    return {
        auspicious: auspiciousHours[dayOfWeek] || [],
        inauspicious: inauspiciousHours[dayOfWeek] || []
    };
}

// Get lunar day (simplified calculation)
function getLunarDay(date) {
    // Simplified lunar calculation - in real implementation, use proper lunar calendar algorithm
    const baseDate = new Date(2024, 0, 1); // Reference date
    const diffTime = Math.abs(date - baseDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return (diffDays % 30) + 1; // Simplified 30-day lunar month
}

// Format auspicious information
function formatAuspiciousInfo(hours) {
    if (!hours || hours.length === 0) return 'Kh√¥ng c√≥';
    return hours.map(hour => {
        const [start, end] = hour.split('-');
        return `${start}:00-${end}:00`;
    }).join(', ');
}

// Helper functions for lunar calendar activities
function getGoodActivities(lunarDay) {
    const activities = {
        1: 'Khai tr∆∞∆°ng, kh·ªüi c√¥ng, c∆∞·ªõi h·ªèi',
        2: 'Xu·∫•t h√†nh, giao d·ªãch, mua s·∫Øm',
        3: 'C·∫ßu nguy·ªán, th·ªù c√∫ng, h·ªçc t·∫≠p',
        4: 'An t√°ng, d·ªçn nh√†, s·ª≠a ch·ªØa',
        5: 'Khai tr∆∞∆°ng, k√Ω h·ª£p ƒë·ªìng, ƒë·∫ßu t∆∞',
        6: 'C∆∞·ªõi h·ªèi, xu·∫•t h√†nh, g·∫∑p g·ª°',
        7: 'Th·ªù c√∫ng, c·∫ßu nguy·ªán, tu t·∫≠p',
        8: 'Kh·ªüi c√¥ng, x√¢y d·ª±ng, tr·ªìng tr·ªçt',
        9: 'Giao d·ªãch, mua b√°n, kinh doanh',
        10: 'C∆∞·ªõi h·ªèi, l·ªÖ h·ªôi, vui ch∆°i',
        11: 'Xu·∫•t h√†nh, du l·ªãch, di chuy·ªÉn',
        12: 'H·ªçc t·∫≠p, nghi√™n c·ª©u, s√°ng t√°c',
        13: 'Khai tr∆∞∆°ng, kh·ªüi nghi·ªáp, ƒë·∫ßu t∆∞',
        14: 'C·∫ßu nguy·ªán, th·ªù c√∫ng, t·ª´ thi·ªán',
        15: 'C∆∞·ªõi h·ªèi, l·ªÖ h·ªôi, sum h·ªçp',
        16: 'Xu·∫•t h√†nh, giao d·ªãch, h·ª£p t√°c',
        17: 'S·ª≠a ch·ªØa, tu b·ªï, c·∫£i t·∫°o',
        18: 'H·ªçc t·∫≠p, thi c·ª≠, nghi√™n c·ª©u',
        19: 'Khai tr∆∞∆°ng, kinh doanh, ƒë·∫ßu t∆∞',
        20: 'C∆∞·ªõi h·ªèi, l·ªÖ h·ªôi, vui ch∆°i',
        21: 'Xu·∫•t h√†nh, du l·ªãch, kh√°m ph√°',
        22: 'Th·ªù c√∫ng, c·∫ßu nguy·ªán, tu t·∫≠p',
        23: 'Giao d·ªãch, mua b√°n, h·ª£p t√°c',
        24: 'S·ª≠a ch·ªØa, d·ªçn d·∫πp, trang tr√≠',
        25: 'C∆∞·ªõi h·ªèi, sum h·ªçp, g·∫∑p g·ª°',
        26: 'H·ªçc t·∫≠p, nghi√™n c·ª©u, s√°ng t√°c',
        27: 'Khai tr∆∞∆°ng, kh·ªüi c√¥ng, ƒë·∫ßu t∆∞',
        28: 'Xu·∫•t h√†nh, giao d·ªãch, kinh doanh',
        29: 'C·∫ßu nguy·ªán, th·ªù c√∫ng, t·ª´ thi·ªán',
        30: 'Ngh·ªâ ng∆°i, tƒ©nh t√¢m, suy ng·∫´m'
    };
    return activities[lunarDay] || 'C√°c vi·ªác th√¥ng th∆∞·ªùng';
}

function getBadActivities(lunarDay) {
    const activities = {
        1: 'An t√°ng, ph√° d·ª°, tranh c√£i',
        2: 'Kh·ªüi c√¥ng l·ªõn, k√Ω h·ª£p ƒë·ªìng quan tr·ªçng',
        3: 'C∆∞·ªõi h·ªèi, khai tr∆∞∆°ng, xu·∫•t h√†nh xa',
        4: 'Giao d·ªãch l·ªõn, ƒë·∫ßu t∆∞ m·∫°o hi·ªÉm',
        5: 'An t√°ng, ph√° d·ª°, chuy·ªÉn nh√†',
        6: 'Kh·ªüi ki·ªán, tranh ch·∫•p, c√£i v√£',
        7: 'Khai tr∆∞∆°ng, c∆∞·ªõi h·ªèi, vui ch∆°i',
        8: 'An t√°ng, ph√° d·ª°, ƒë√†o ƒë·∫•t',
        9: 'C∆∞·ªõi h·ªèi, l·ªÖ h·ªôi, sum h·ªçp',
        10: 'Kh·ªüi ki·ªán, tranh ch·∫•p, xung ƒë·ªôt',
        11: 'Khai tr∆∞∆°ng l·ªõn, ƒë·∫ßu t∆∞ quan tr·ªçng',
        12: 'C∆∞·ªõi h·ªèi, l·ªÖ h·ªôi, vui ch∆°i',
        13: 'An t√°ng, ph√° d·ª°, chuy·ªÉn nh√†',
        14: 'Kh·ªüi ki·ªán, tranh ch·∫•p, c√£i v√£',
        15: 'Ph√° d·ª°, ƒë√†o ƒë·∫•t, ch·∫∑t c√¢y',
        16: 'An t√°ng, tang l·ªÖ, vi·ªác bu·ªìn',
        17: 'C∆∞·ªõi h·ªèi, khai tr∆∞∆°ng, l·ªÖ h·ªôi',
        18: 'Kh·ªüi ki·ªán, tranh ch·∫•p, xung ƒë·ªôt',
        19: 'An t√°ng, ph√° d·ª°, chuy·ªÉn nh√†',
        20: 'Giao d·ªãch m·∫°o hi·ªÉm, ƒë·∫ßu t∆∞ l·ªõn',
        21: 'C∆∞·ªõi h·ªèi, khai tr∆∞∆°ng, l·ªÖ h·ªôi',
        22: 'Kh·ªüi ki·ªán, tranh ch·∫•p, c√£i v√£',
        23: 'An t√°ng, ph√° d·ª°, ƒë√†o ƒë·∫•t',
        24: 'C∆∞·ªõi h·ªèi, l·ªÖ h·ªôi, sum h·ªçp',
        25: 'Kh·ªüi ki·ªán, tranh ch·∫•p, xung ƒë·ªôt',
        26: 'An t√°ng, ph√° d·ª°, chuy·ªÉn nh√†',
        27: 'Giao d·ªãch m·∫°o hi·ªÉm, c√£i v√£',
        28: 'C∆∞·ªõi h·ªèi, khai tr∆∞∆°ng, l·ªÖ h·ªôi',
        29: 'Kh·ªüi ki·ªán, tranh ch·∫•p, ph√° d·ª°',
        30: 'Khai tr∆∞∆°ng, c∆∞·ªõi h·ªèi, xu·∫•t h√†nh'
    };
    return activities[lunarDay] || 'C√°c vi·ªác kh√¥ng ph√π h·ª£p';
}

// Initialize seasonal decorations
document.addEventListener('DOMContentLoaded', () => {
    addSeasonalDecorations();
    initializeSmoothScrolling();
    initializeLogoScrollToTop();
});

// Logo click to scroll to top functionality
function initializeLogoScrollToTop() {
    // Add click event to logo image
    const logoImg = document.querySelector('.header-brand .app-icon');
    if (logoImg) {
        logoImg.addEventListener('click', function(e) {
            e.preventDefault();
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
        // Add cursor pointer style
        logoImg.style.cursor = 'pointer';
    }
    
    // Add click event to logo text/link
    const logoLink = document.querySelector('.header-brand h1 a');
    if (logoLink) {
        logoLink.addEventListener('click', function(e) {
            e.preventDefault();
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    }
    
    // Add click event to entire header brand area
    const headerBrand = document.querySelector('.header-brand');
    if (headerBrand) {
        headerBrand.addEventListener('click', function(e) {
            e.preventDefault();
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
        // Add cursor pointer style
        headerBrand.style.cursor = 'pointer';
    }
}