// Quiz Ki·∫øn Th·ª©c V·ªÅ T·∫øt - S·∫Øp T·∫øt 2026
class TetQuiz {
    constructor(rootElement) {
        this.currentQuestion = 0;
        this.score = 0;
        this.questions = this.getQuestions();
        this.userAnswers = [];
        this.rootElement = rootElement; // Store the root element
        this.init();
    }

    getQuestions() {
        return [
            {
                question: "T·∫øt Nguy√™n ƒê√°n 2026 r∆°i v√†o ng√†y n√†o?",
                options: [
                    "15 th√°ng 2 nƒÉm 2026",
                    "17 th√°ng 2 nƒÉm 2026", 
                    "19 th√°ng 2 nƒÉm 2026",
                    "21 th√°ng 2 nƒÉm 2026"
                ],
                correct: 1,
                explanation: "T·∫øt Nguy√™n ƒê√°n 2026 r∆°i v√†o ng√†y 17 th√°ng 2 nƒÉm 2026 (√¢m l·ªãch m√πng 1 th√°ng Gi√™ng nƒÉm B√≠nh Ng·ªç)."
            },
            {
                question: "NƒÉm 2026 l√† nƒÉm con g√¨ theo √¢m l·ªãch?",
                options: [
                    "NƒÉm con R·∫Øn (T·ªµ)",
                    "NƒÉm con Ng·ª±a (Ng·ªç)",
                    "NƒÉm con D√™ (M√πi)",
                    "NƒÉm con Kh·ªâ (Th√¢n)"
                ],
                correct: 1,
                explanation: "NƒÉm 2026 l√† nƒÉm B√≠nh Ng·ªç (nƒÉm con Ng·ª±a) theo √¢m l·ªãch Vi·ªát Nam."
            },
            {
                question: "M√≥n ƒÉn n√†o ƒë∆∞·ª£c coi l√† 'linh h·ªìn' c·ªßa m√¢m c∆°m T·∫øt?",
                options: [
                    "B√°nh ch∆∞ng",
                    "Th·ªãt kho t√†u",
                    "Nem r√°n",
                    "X√¥i g·∫•c"
                ],
                correct: 0,
                explanation: "B√°nh ch∆∞ng ƒë∆∞·ª£c coi l√† 'linh h·ªìn' c·ªßa m√¢m c∆°m T·∫øt, t∆∞·ª£ng tr∆∞ng cho s·ª± sum v·∫ßy v√† may m·∫Øn."
            },
            {
                question: "T·∫°i sao ng∆∞·ªùi Vi·ªát th∆∞·ªùng d·ªçn d·∫πp nh√† c·ª≠a tr∆∞·ªõc T·∫øt?",
                options: [
                    "ƒê·ªÉ nh√† s·∫°ch s·∫Ω",
                    "Xua ƒëu·ªïi v·∫≠n xui, ƒë√≥n may m·∫Øn",
                    "ƒê·ªÉ kh√°ch ƒë·∫øn ch∆°i",
                    "Theo phong t·ª•c"
                ],
                correct: 1,
                explanation: "Theo quan ni·ªám d√¢n gian, d·ªçn d·∫πp nh√† c·ª≠a gi√∫p xua ƒëu·ªïi v·∫≠n xui v√† ƒë√≥n may m·∫Øn, t√†i l·ªôc v√†o nh√† trong nƒÉm m·ªõi."
            },
            {
                question: "Hoa n√†o t∆∞·ª£ng tr∆∞ng cho T·∫øt mi·ªÅn B·∫Øc?",
                options: [
                    "Hoa mai",
                    "Hoa ƒë√†o",
                    "Hoa qu·∫•t",
                    "Hoa c√∫c"
                ],
                correct: 1,
                explanation: "Hoa ƒë√†o l√† bi·ªÉu t∆∞·ª£ng kh√¥ng th·ªÉ thi·∫øu c·ªßa T·∫øt mi·ªÅn B·∫Øc, t∆∞·ª£ng tr∆∞ng cho s·ª± may m·∫Øn v√† th·ªãnh v∆∞·ª£ng."
            },
            {
                question: "Ng√†y 23 th√°ng Ch·∫°p √¢m l·ªãch c√≥ √Ω nghƒ©a g√¨?",
                options: [
                    "Ng√†y g√≥i b√°nh ch∆∞ng",
                    "Ng√†y √¥ng T√°o v·ªÅ tr·ªùi",
                    "Ng√†y c√∫ng giao th·ª´a",
                    "Ng√†y mua s·∫Øm T·∫øt"
                ],
                correct: 1,
                explanation: "Ng√†y 23 th√°ng Ch·∫°p l√† ng√†y √¥ng T√°o v·ªÅ tr·ªùi b√°o c√°o v·ªõi Ng·ªçc Ho√†ng v·ªÅ vi·ªác l√†m ƒÉn c·ªßa gia ƒë√¨nh trong nƒÉm."
            },
            {
                question: "L√¨ x√¨ c√≥ √Ω nghƒ©a g√¨ trong vƒÉn h√≥a T·∫øt?",
                options: [
                    "Ch·ªâ l√† ti·ªÅn th∆∞·ªüng",
                    "L·ªùi ch√∫c may m·∫Øn, th·ªãnh v∆∞·ª£ng",
                    "ƒê·ªÉ tr·∫ª em mua ƒë·ªì ch∆°i",
                    "Theo phong t·ª•c"
                ],
                correct: 1,
                explanation: "L√¨ x√¨ kh√¥ng ch·ªâ l√† ti·ªÅn m√† c√≤n l√† l·ªùi ch√∫c may m·∫Øn, th·ªãnh v∆∞·ª£ng v√† s·ª©c kh·ªèe cho ng∆∞·ªùi nh·∫≠n trong nƒÉm m·ªõi."
            },
            {
                question: "Tr√≤ ch∆°i d√¢n gian n√†o ph·ªï bi·∫øn nh·∫•t trong d·ªãp T·∫øt?",
                options: [
                    "B·∫ßu cua t√¥m c√°",
                    "ƒê√°nh b√†i",
                    "C·ªù t∆∞·ªõng",
                    "√î ƒÉn quan"
                ],
                correct: 0,
                explanation: "B·∫ßu cua t√¥m c√° l√† tr√≤ ch∆°i d√¢n gian ph·ªï bi·∫øn nh·∫•t trong d·ªãp T·∫øt, mang l·∫°i kh√¥ng kh√≠ vui t∆∞∆°i v√† may m·∫Øn."
            },
            {
                question: "M√†u ƒë·ªè trong T·∫øt c√≥ √Ω nghƒ©a g√¨?",
                options: [
                    "M√†u ƒë·∫πp",
                    "T∆∞·ª£ng tr∆∞ng cho may m·∫Øn, th·ªãnh v∆∞·ª£ng",
                    "M√†u truy·ªÅn th·ªëng",
                    "D·ªÖ nh√¨n"
                ],
                correct: 1,
                explanation: "M√†u ƒë·ªè trong T·∫øt t∆∞·ª£ng tr∆∞ng cho may m·∫Øn, th·ªãnh v∆∞·ª£ng v√† xua ƒëu·ªïi t√† ma, v·∫≠n xui."
            },
            {
                question: "T·∫øt Nguy√™n ƒê√°n c√≥ ngu·ªìn g·ªëc t·ª´ ƒë√¢u?",
                options: [
                    "T·ª´ Trung Qu·ªëc",
                    "T·ª´ Vi·ªát Nam c·ªï ƒë·∫°i",
                    "T·ª´ vƒÉn h√≥a ƒê√¥ng Nam √Å",
                    "T·ª´ vƒÉn h√≥a chung ch√¢u √Å"
                ],
                correct: 3,
                explanation: "T·∫øt Nguy√™n ƒê√°n c√≥ ngu·ªìn g·ªëc t·ª´ vƒÉn h√≥a chung c·ªßa c√°c n∆∞·ªõc ch√¢u √Å, m·ªói n∆∞·ªõc c√≥ c√°ch ƒë√≥n T·∫øt ri√™ng."
            }
        ];
    }

    init() {
        this.renderQuiz();
        this.bindEvents();
    }

    renderQuiz() {
        const quizHTML = `
            <div class="tet-quiz-container">
                <h3>üéØ Quiz Ki·∫øn Th·ª©c V·ªÅ T·∫øt</h3>
                <p class="quiz-subtitle">Ki·ªÉm tra hi·ªÉu bi·∫øt c·ªßa b·∫°n v·ªÅ vƒÉn h√≥a T·∫øt Vi·ªát Nam</p>
                
                <div class="quiz-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="quiz-progress-fill"></div>
                    </div>
                    <span class="progress-text" id="quiz-progress-text">C√¢u 1/10</span>
                </div>
                
                <div class="quiz-content" id="quiz-content">
                    <!-- Quiz content will be rendered here -->
                </div>
                
                <div class="quiz-actions">
                    <button class="quiz-btn prev-btn" id="prev-btn" style="display: none;">‚Üê C√¢u tr∆∞·ªõc</button>
                    <button class="quiz-btn next-btn" id="next-btn">C√¢u ti·∫øp ‚Üí</button>
                    <button class="quiz-btn submit-btn" id="submit-btn" style="display: none;">üèÜ Xem k·∫øt qu·∫£</button>
                </div>
                
                <div class="quiz-results" id="quiz-results" style="display: none;">
                    <!-- Results will be shown here -->
                </div>
            </div>
        `;

        // T√¨m v·ªã tr√≠ ƒë·ªÉ ch√®n quiz
        if (this.rootElement) {
            const quizContainer = document.createElement('div');
            quizContainer.className = 'quiz-container';
            quizContainer.innerHTML = quizHTML;
            this.rootElement.appendChild(quizContainer);
        }

        this.showQuestion(0);
    }

    showQuestion(questionIndex) {
        const question = this.questions[questionIndex];
        const contentElement = document.getElementById('quiz-content');
        
        if (!contentElement) return;

        const questionHTML = `
            <div class="question-container">
                <h4 class="question-text">${question.question}</h4>
                <div class="options-container">
                    ${question.options.map((option, index) => `
                        <label class="option-item ${this.userAnswers[questionIndex] === index ? 'selected' : ''}">
                            <input type="radio" name="question-${questionIndex}" value="${index}" 
                                   ${this.userAnswers[questionIndex] === index ? 'checked' : ''}>
                            <span class="option-text">${option}</span>
                        </label>
                    `).join('')}
                </div>
            </div>
        `;

        contentElement.innerHTML = questionHTML;
        this.updateProgress();
        this.updateButtons();
        this.bindQuestionEvents();
    }

    updateProgress() {
        const progressFill = document.getElementById('quiz-progress-fill');
        const progressText = document.getElementById('quiz-progress-text');
        
        if (progressFill && progressText) {
            const progress = ((this.currentQuestion + 1) / this.questions.length) * 100;
            progressFill.style.width = `${progress}%`;
            progressText.textContent = `C√¢u ${this.currentQuestion + 1}/${this.questions.length}`;
        }
    }

    updateButtons() {
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const submitBtn = document.getElementById('submit-btn');

        if (prevBtn) {
            prevBtn.style.display = this.currentQuestion > 0 ? 'inline-block' : 'none';
        }

        if (nextBtn && submitBtn) {
            if (this.currentQuestion === this.questions.length - 1) {
                nextBtn.style.display = 'none';
                submitBtn.style.display = 'inline-block';
            } else {
                nextBtn.style.display = 'inline-block';
                submitBtn.style.display = 'none';
            }
        }
    }

    bindEvents() {
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const submitBtn = document.getElementById('submit-btn');

        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.previousQuestion());
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.nextQuestion());
        }

        if (submitBtn) {
            submitBtn.addEventListener('click', () => this.submitQuiz());
        }
    }

    bindQuestionEvents() {
        const options = document.querySelectorAll('input[type="radio"]');
        options.forEach(option => {
            option.addEventListener('change', (e) => {
                this.userAnswers[this.currentQuestion] = parseInt(e.target.value);
                this.updateOptionStyles();
            });
        });
    }

    updateOptionStyles() {
        const options = document.querySelectorAll('.option-item');
        options.forEach((option, index) => {
            if (this.userAnswers[this.currentQuestion] === index) {
                option.classList.add('selected');
            } else {
                option.classList.remove('selected');
            }
        });
    }

    previousQuestion() {
        if (this.currentQuestion > 0) {
            this.currentQuestion--;
            this.showQuestion(this.currentQuestion);
        }
    }

    nextQuestion() {
        if (this.currentQuestion < this.questions.length - 1) {
            this.currentQuestion++;
            this.showQuestion(this.currentQuestion);
        }
    }

    submitQuiz() {
        this.calculateScore();
        this.showResults();
    }

    calculateScore() {
        this.score = 0;
        this.userAnswers.forEach((answer, index) => {
            if (answer === this.questions[index].correct) {
                this.score++;
            }
        });
    }

    showResults() {
        const resultsElement = document.getElementById('quiz-results');
        const contentElement = document.getElementById('quiz-content');
        const actionsElement = document.querySelector('.quiz-actions');

        if (!resultsElement || !contentElement || !actionsElement) return;

        const percentage = (this.score / this.questions.length) * 100;
        const grade = this.getGrade(percentage);
        const message = this.getResultMessage(percentage);

        const resultsHTML = `
            <div class="results-container">
                <h4>üèÜ K·∫øt Qu·∫£ Quiz</h4>
                <div class="score-display">
                    <div class="score-circle">
                        <span class="score-number">${this.score}/${this.questions.length}</span>
                        <span class="score-percentage">${percentage}%</span>
                    </div>
                    <div class="grade-badge ${grade.toLowerCase()}">${grade}</div>
                </div>
                <p class="result-message">${message}</p>
                
                <div class="answers-review">
                    <h5>üìù Xem l·∫°i ƒë√°p √°n:</h5>
                    ${this.questions.map((question, index) => `
                        <div class="answer-item ${this.userAnswers[index] === question.correct ? 'correct' : 'incorrect'}">
                            <h6>C√¢u ${index + 1}: ${question.question}</h6>
                            <p><strong>ƒê√°p √°n c·ªßa b·∫°n:</strong> ${this.userAnswers[index] !== undefined ? question.options[this.userAnswers[index]] : 'Ch∆∞a tr·∫£ l·ªùi'}</p>
                            <p><strong>ƒê√°p √°n ƒë√∫ng:</strong> ${question.options[question.correct]}</p>
                            <p class="explanation"><strong>Gi·∫£i th√≠ch:</strong> ${question.explanation}</p>
                        </div>
                    `).join('')}
                </div>
                
                <div class="share-results">
                    <h5>üì§ Chia s·∫ª k·∫øt qu·∫£:</h5>
                    <button class="share-btn" onclick="tetQuiz.shareResults()">
                        üì± Chia s·∫ª tr√™n Facebook
                    </button>
                    <button class="retry-btn" onclick="tetQuiz.retryQuiz()">
                        üîÑ L√†m l·∫°i
                    </button>
                </div>
            </div>
        `;

        contentElement.style.display = 'none';
        actionsElement.style.display = 'none';
        resultsElement.innerHTML = resultsHTML;
        resultsElement.style.display = 'block';
    }

    getGrade(percentage) {
        if (percentage >= 90) return 'Xu·∫•t S·∫Øc';
        if (percentage >= 80) return 'Gi·ªèi';
        if (percentage >= 70) return 'Kh√°';
        if (percentage >= 60) return 'Trung B√¨nh';
        return 'C·∫ßn C·∫£i Thi·ªán';
    }

    getResultMessage(percentage) {
        if (percentage >= 90) {
            return 'üéâ Ch√∫c m·ª´ng! B·∫°n l√† chuy√™n gia v·ªÅ vƒÉn h√≥a T·∫øt Vi·ªát Nam!';
        } else if (percentage >= 80) {
            return 'üëè R·∫•t t·ªët! B·∫°n c√≥ hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ T·∫øt truy·ªÅn th·ªëng!';
        } else if (percentage >= 70) {
            return 'üëç T·ªët! B·∫°n n·∫Øm kh√° v·ªØng ki·∫øn th·ª©c v·ªÅ T·∫øt!';
        } else if (percentage >= 60) {
            return 'üìö Kh√° ·ªïn! H√£y t√¨m hi·ªÉu th√™m v·ªÅ vƒÉn h√≥a T·∫øt nh√©!';
        } else {
            return 'üìñ C·∫ßn h·ªçc h·ªèi th√™m! H√£y ƒë·ªçc th√™m v·ªÅ vƒÉn h√≥a T·∫øt Vi·ªát Nam!';
        }
    }

    shareResults() {
        const percentage = (this.score / this.questions.length) * 100;
        const grade = this.getGrade(percentage);
        
        const shareText = `üéØ T√¥i v·ª´a ƒë·∫°t ${percentage}% trong Quiz Ki·∫øn Th·ª©c V·ªÅ T·∫øt tr√™n S·∫Øp T·∫øt 2026! X·∫øp lo·∫°i: ${grade} üèÆ`;
        const shareUrl = encodeURIComponent(window.location.href);
        const shareTitle = encodeURIComponent('Quiz Ki·∫øn Th·ª©c V·ªÅ T·∫øt - S·∫Øp T·∫øt 2026');
        
        const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${shareUrl}&quote=${encodeURIComponent(shareText)}`;
        window.open(facebookUrl, '_blank');
    }

    retryQuiz() {
        this.currentQuestion = 0;
        this.score = 0;
        this.userAnswers = [];
        
        const resultsElement = document.getElementById('quiz-results');
        const contentElement = document.getElementById('quiz-content');
        const actionsElement = document.querySelector('.quiz-actions');

        if (resultsElement) resultsElement.style.display = 'none';
        if (contentElement) contentElement.style.display = 'block';
        if (actionsElement) actionsElement.style.display = 'flex';

        this.showQuestion(0);
    }
}

// Ensure the quiz renders in the correct root element
let tetQuiz;
document.addEventListener('DOMContentLoaded', () => {
    tetQuiz = new TetQuiz();
    // Render into #tet-quiz-root if not already set
    if (document.getElementById('tet-quiz-root')) {
        tetQuiz.renderQuiz(document.getElementById('tet-quiz-root'));
    }
}); 